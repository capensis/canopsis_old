// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package alarm

import (
	json "encoding/json"
	datetime "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/datetime"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibApiAlarm(in *jlexer.Lexer, out *ExportFetchParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_format":
			out.TimeFormat = string(in.String())
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]string, 0, 4)
					} else {
						out.Filters = []string{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Filters = append(out.Filters, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "search":
			out.Search = string(in.String())
		case "time_field":
			out.TimeField = string(in.String())
		case "tstart":
			if in.IsNull() {
				in.Skip()
				out.StartFrom = nil
			} else {
				if out.StartFrom == nil {
					out.StartFrom = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StartFrom).UnmarshalJSON(data))
				}
			}
		case "tstop":
			if in.IsNull() {
				in.Skip()
				out.StartTo = nil
			} else {
				if out.StartTo == nil {
					out.StartTo = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StartTo).UnmarshalJSON(data))
				}
			}
		case "opened":
			if in.IsNull() {
				in.Skip()
				out.Opened = nil
			} else {
				if out.Opened == nil {
					out.Opened = new(bool)
				}
				*out.Opened = bool(in.Bool())
			}
		case "correlation":
			out.OnlyParents = bool(in.Bool())
		case "category":
			out.Category = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Tags = append(out.Tags, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "alarm_pattern":
			out.AlarmPattern = string(in.String())
		case "entity_pattern":
			out.EntityPattern = string(in.String())
		case "pbehavior_pattern":
			out.PbehaviorPattern = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]InstructionFilterRequest, 0, 0)
					} else {
						out.Instructions = []InstructionFilterRequest{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v3 InstructionFilterRequest
					easyjsonD2b7633eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibApiAlarm1(in, &v3)
					out.Instructions = append(out.Instructions, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "only_bookmarks":
			out.OnlyBookmarks = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibApiAlarm(out *jwriter.Writer, in ExportFetchParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_format\":"
		out.RawString(prefix[1:])
		out.String(string(in.TimeFormat))
	}
	{
		const prefix string = ",\"filters\":"
		out.RawString(prefix)
		if in.Filters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Filters {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.String(string(in.Search))
	}
	{
		const prefix string = ",\"time_field\":"
		out.RawString(prefix)
		out.String(string(in.TimeField))
	}
	{
		const prefix string = ",\"tstart\":"
		out.RawString(prefix)
		if in.StartFrom == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.StartFrom).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"tstop\":"
		out.RawString(prefix)
		if in.StartTo == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.StartTo).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"opened\":"
		out.RawString(prefix)
		if in.Opened == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Opened))
		}
	}
	{
		const prefix string = ",\"correlation\":"
		out.RawString(prefix)
		out.Bool(bool(in.OnlyParents))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Tags {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"alarm_pattern\":"
		out.RawString(prefix)
		out.String(string(in.AlarmPattern))
	}
	{
		const prefix string = ",\"entity_pattern\":"
		out.RawString(prefix)
		out.String(string(in.EntityPattern))
	}
	{
		const prefix string = ",\"pbehavior_pattern\":"
		out.RawString(prefix)
		out.String(string(in.PbehaviorPattern))
	}
	{
		const prefix string = ",\"instructions\":"
		out.RawString(prefix)
		if in.Instructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Instructions {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibApiAlarm1(out, v9)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"only_bookmarks\":"
		out.RawString(prefix)
		out.Bool(bool(in.OnlyBookmarks))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExportFetchParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibApiAlarm(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExportFetchParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibApiAlarm(l, v)
}
func easyjsonD2b7633eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibApiAlarm1(in *jlexer.Lexer, out *InstructionFilterRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "running":
			if in.IsNull() {
				in.Skip()
				out.Running = nil
			} else {
				if out.Running == nil {
					out.Running = new(bool)
				}
				*out.Running = bool(in.Bool())
			}
		case "include_types":
			if in.IsNull() {
				in.Skip()
				out.IncludeTypes = nil
			} else {
				in.Delim('[')
				if out.IncludeTypes == nil {
					if !in.IsDelim(']') {
						out.IncludeTypes = make([]int, 0, 8)
					} else {
						out.IncludeTypes = []int{}
					}
				} else {
					out.IncludeTypes = (out.IncludeTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int
					v10 = int(in.Int())
					out.IncludeTypes = append(out.IncludeTypes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exclude_types":
			if in.IsNull() {
				in.Skip()
				out.ExcludeTypes = nil
			} else {
				in.Delim('[')
				if out.ExcludeTypes == nil {
					if !in.IsDelim(']') {
						out.ExcludeTypes = make([]int, 0, 8)
					} else {
						out.ExcludeTypes = []int{}
					}
				} else {
					out.ExcludeTypes = (out.ExcludeTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v11 int
					v11 = int(in.Int())
					out.ExcludeTypes = append(out.ExcludeTypes, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "include":
			if in.IsNull() {
				in.Skip()
				out.Include = nil
			} else {
				in.Delim('[')
				if out.Include == nil {
					if !in.IsDelim(']') {
						out.Include = make([]string, 0, 4)
					} else {
						out.Include = []string{}
					}
				} else {
					out.Include = (out.Include)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Include = append(out.Include, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exclude":
			if in.IsNull() {
				in.Skip()
				out.Exclude = nil
			} else {
				in.Delim('[')
				if out.Exclude == nil {
					if !in.IsDelim(']') {
						out.Exclude = make([]string, 0, 4)
					} else {
						out.Exclude = []string{}
					}
				} else {
					out.Exclude = (out.Exclude)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Exclude = append(out.Exclude, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibApiAlarm1(out *jwriter.Writer, in InstructionFilterRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"running\":"
		out.RawString(prefix[1:])
		if in.Running == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Running))
		}
	}
	{
		const prefix string = ",\"include_types\":"
		out.RawString(prefix)
		if in.IncludeTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.IncludeTypes {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"exclude_types\":"
		out.RawString(prefix)
		if in.ExcludeTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.ExcludeTypes {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v17))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"include\":"
		out.RawString(prefix)
		if in.Include == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Include {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"exclude\":"
		out.RawString(prefix)
		if in.Exclude == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Exclude {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
